version: '3.4'
services:

# Grouping Services for dev purposes
  db:
    image: rwgrim/docker-noop
    depends_on: 
      - mongo-rs0-1
      - mongo-rs0-2
      - mongo-rs0-3
      - setup-rs
      - adminmongo
  zoo:
    image: rwgrim/docker-noop
    depends_on: 
      - zoo1
      - zoo2
      - zoo3
      - zoonav
      - zoonav-api
  storage:
    image: rwgrim/docker-noop
    depends_on: 
      - storage1
      - storage2
      - storage3
      - storage4
      - storage5
      - storage6

# Django Web APP
  web:
    build:
      context: ./web_app
      network: host
    image: almidi/portreto-web
    hostname: web
    deploy:
      replicas: 3
    # initialization shell script
    # command: sh ./init.sh
    command: sh init.sh
    volumes:
      - ./web_app/django:/app
    ports:
       - "8000:8000"
    # networks:
    #   - webnet       

# Django Application Service
  appservice:
    build:
      context: ./application
      network: host
    image: almidi/portreto-app
    deploy:
      replicas: 3
    hostname: appservice
    # initialization shell script
    # command: sh ./init.sh
    command: sh init.sh
    volumes:
      - ./application/app_service:/app
    ports:
       - "8009:80"    
    depends_on:
      - zoo
      - storage
    # networks:
    #   - webnet      

  auth:
    build:
      context: ./auth
      network: host
    hostname: auth
    image: almidi/portreto-auth
    deploy:
      replicas: 3
    command: sh init.sh
    volumes:
      - ./auth/django:/app
    ports:
      # host:client
      - '8010:8000'
    depends_on:
      - web
    # networks:
    #   - webnet

# Storage Servers
  storage1:
    build:
      context: ./storage
      network: host
    image: almidi/portreto-storage
    deploy:
      mode: global
      restart_policy:
          condition: on-failure
          delay: 5s
    # initialization shell script
    command: sh init.sh
    hostname: storage1
    volumes:
      - ./storage/django:/app
      - ./storage/storage_1:/data
    ports:
      - "8001:80"
    environment:
      STORAGE_ID: 1 
      EXTERNAL_URL: "http://localhost:8001"
    depends_on:
      - zoo
    # networks:
    #   - webnet      

  storage2:
    build:
      context: ./storage
      network: host
    image: almidi/portreto-storage
    deploy:
      mode: global
      restart_policy:
          condition: on-failure
          delay: 5s
    # initialization shell script
    command: sh init.sh
    hostname: storage2
    volumes:
      - ./storage/django:/app
      - ./storage/storage_2:/data
    ports:
      - "8002:80"
    environment:
      STORAGE_ID: 2 
      EXTERNAL_URL: "http://localhost:8002"
    depends_on:
      - zoo
    # networks:
    #   - webnet      
      
  storage3:
    build:
      context: ./storage
      network: host
    image: almidi/portreto-storage
    deploy:
      mode: global
      restart_policy:
          condition: on-failure
          delay: 5s
    restart: always
    # initialization shell script
    command: sh init.sh
    hostname: storage3
    volumes:
      - ./storage/django:/app
      - ./storage/storage_3:/data
    ports:
      - "8003:80"
    environment:
      STORAGE_ID: 3 
      EXTERNAL_URL: "http://localhost:8003"
    depends_on:
      - zoo  
    # networks:
    #   - webnet         

  storage4:
    build:
      context: ./storage
      network: host
    image: almidi/portreto-storage
    deploy:
      mode: global
      restart_policy:
          condition: on-failure
          delay: 5s
    # initialization shell script
    command: sh init.sh
    hostname: storage4
    volumes:
      - ./storage/django:/app
      - ./storage/storage_4:/data
    ports:
      - "8004:80"
    environment:
      STORAGE_ID: 4 
      EXTERNAL_URL: "http://localhost:8004"
    depends_on:
      - zoo
    # networks:
    #   - webnet      

  storage5:
    build:
      context: ./storage
      network: host
    image: almidi/portreto-storage
    deploy:
      mode: global
      restart_policy:
          condition: on-failure
          delay: 5s
    # initialization shell script
    command: sh init.sh
    hostname: storage5
    volumes:
      - ./storage/django:/app
      - ./storage/storage_5:/data
    ports:
      - "8005:80"
    environment:
      STORAGE_ID: 5 
      EXTERNAL_URL: "http://localhost:8005"

    depends_on:
      - zoo
    # networks:
    #   - webnet      
      
  storage6:
    build:
        context: ./storage
        network: host
    image: almidi/portreto-storage
    deploy:
      mode: global
      restart_policy:
          condition: on-failure
          delay: 5s
    restart: always
    # initialization shell script
    command: sh init.sh
    hostname: storage6
    volumes:
      - ./storage/django:/app
      - ./storage/storage_6:/data
    ports:
      - "8006:80"
    environment:
      STORAGE_ID: 6 
      EXTERNAL_URL: "http://localhost:8006"
    depends_on:
      - zoo
    # networks:
    #   - webnet           
   
# Zookeeper Ensemble
  zoo1:
    image: zookeeper
    restart: always
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181

  zoo2:
    image: zookeeper
    restart: always
    hostname: zoo2
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zoo3:2888:3888;2181

  zoo3:
    image: zookeeper
    restart: always
    hostname: zoo3
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181    

  # Web GUI for Zookeeper
  zoonav:
    image: elkozmon/zoonavigator-web:0.6.1
    container_name: zoonav
    ports:
     - "8080:8080"
    environment:
      WEB_HTTP_PORT: 8080
      API_HOST: "zoonav-api"
      API_PORT: 9000
    depends_on:
     - zoonav-api
    restart: always
    # networks:
    #   - webnet    
  
  zoonav-api:
    image: elkozmon/zoonavigator-api:0.6.1
    container_name: zoonav-api
    environment:
      API_HTTP_PORT: 9000
    restart: always
    # networks:
    #   - webnet        

# Mongo replica set    
  mongo-rs0-1:
    image: "mongo"
    command: --replSet rs0 --smallfiles --oplogSize 128
    deploy:
      restart_policy:
          condition: on-failure    
    ports:
      - "27017:27017"
    # volumes:
    #   - ./mongo-rs0-1/data:/data/db
    depends_on:
      - "mongo-rs0-2"
      - "mongo-rs0-3"
    # networks:
    #   - webnet      

  mongo-rs0-2:
    image: "mongo"
    command: --replSet rs0 --smallfiles --oplogSize 128
    deploy:
      mode: global
      restart_policy:
          condition: on-failure    
    ports:
      - "27018:27017"
    # volumes:
    #   - ./mongo-rs0-2/data:/data/db
    # networks:
    #   - webnet    

  mongo-rs0-3:
    image: "mongo"
    command: --replSet rs0 --smallfiles --oplogSize 128
    deploy:
      mode: global
      restart_policy:
          condition: on-failure    
    ports:
      - "27019:27017"
    # volumes:
    #   - ./mongo-rs0-3/data:/data/db
    # networks:
    #   - webnet    

# Docker to setup replica set and then die (:
  setup-rs:
    image: almidi/porteto-setup-rs
    build: ./setup-rs
    deploy:
      mode: global
      restart_policy:
          condition: on-failure
          max_attempts: 2
    depends_on:
      - "mongo-rs0-1"
    # networks:
    #   - webnet  

# Admin page for mongoDB
  adminmongo:
    image: adicom/admin-mongo
    # First connection can be initialized with environment variables
    # Web connection syntax: mongodb://<user>:<password>@127.0.0.1:<port>/<db>
    # Web connection 1 string:  mongodb://mongo-rs0-1

    environment:
      # The name of the connection to create on boot
      CONN_NAME: mongo1
      DB_HOST: mongo-rs0-1
    ports:
      - "1234:1234"
    depends_on:
      - "mongo-rs0-1"
    # networks:
    #   - webnet

#Docker Visualizer
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8090:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
    # networks:
    #   - webnet
# networks:
#   webnet:
#     driver: bridge